<shaders>
    <shader name="WarpZone_TonyRage">
        <parameters>
            <param name="ActiveIn" type="float"/>
            <param name="TonyTime" type="float"/>
            <param name="ScreenSize" type="vec2"/>
            <param name="PlayerPos" type="vec2"/>
        </parameters>
        <vertex><![CDATA[
            attribute vec3 Position;
            attribute vec4 Color;
            attribute vec2 TexCoord;
            attribute vec4 RenderData;
            attribute vec2 TextureSize;
            attribute float Scale;
            attribute float ActiveIn;
            attribute float TonyTime;
            attribute vec2 ScreenSize;
            attribute vec2 PlayerPos;
            
            varying vec4 Color0;
            varying vec2 TexCoord0;
            varying vec4 RenderDataOut;
            varying vec2 TextureSize0;
            varying float ScaleOut;
            varying float ActiveInOut;
            varying float TonyTimeOut;
            varying float TonyTimeProc;
            varying float TonyTimeProc2;
            varying vec2 ScreenSize0;
            varying vec2 ScreenCenter;
            uniform sampler2D Texture0;

            uniform mat4 Transform;
            void main(void)
            {
                RenderDataOut = RenderData;
                TextureSize0 = TextureSize;
                Color0 = Color;
                TexCoord0 = TexCoord;
                gl_Position = Transform * vec4(Position.xyz, 1.0);

                ActiveInOut = ActiveIn;
                TonyTimeOut = TonyTime;
                TonyTimeProc = (sin( TonyTimeOut/50 )+1) / 4 + .5;
                TonyTimeProc2 = (sin( TonyTimeOut/30 )+1) / 4 + .5;
                ScreenSize0 = (ScreenSize / RenderData.zw) * Scale;
                ScreenCenter = 0.5 * (ScreenSize0.xy);
                //ScreenCenter = PlayerPos / RenderData.zw * Scale;
            }
        ]]></vertex>
        <fragment><![CDATA[
            varying vec4 Color0;
            varying vec2 TexCoord0;
            varying vec4 RenderDataOut;
            varying vec2 TextureSize0;
            varying float ScaleOut;
            varying float ActiveInOut;
            varying float TonyTimeOut;
            varying float TonyTimeProc;
            varying float TonyTimeProc2;
            varying vec2 ScreenSize0;
            varying vec2 ScreenCenter;
            uniform sampler2D Texture0;

            const float redOffset   =  0.002;
            const float greenOffset =  0.0001;
            const float blueOffset  = -0.0012;

            float disst(vec2 a, vec2 b) {
                return sqrt( (a.x-b.x) * (a.x-b.x) + (a.y-b.y) * (a.y-b.y) );
            }

            vec2 errmove(vec2 cord, float ti, vec2 center) {
                // float proc = (ti-.5) * .1;
                vec2 eye1Jitter = 0.001 * vec2(cos(ti/15), sin(ti/15));
                // vec2 fromcen = (TexCoord0 - center );
                // vec2 hh = vec2(ScreenSize0.x/2 * eye1Jitter.x, ScreenSize0.y/2 * -eye1Jitter.y);
                vec2 hh = ScreenSize0 * eye1Jitter;
               
                return hh;
            }

            const vec3 neonColor1 = vec3(0.8, 0.11, 0.4);
            const vec3 neonColor2 = vec3(0.8, 0.11, 0.4);

            vec3 neonmix(float dist, float ti) {
                //return col * neonColor1 * (ti);
                return vec3((ti*.5 +.3)* dist*5 , 1-(ti*.2) , (.8 - ti*.7) * dist*20);
            }

            void main(void)
            {
                if (ActiveInOut > 0.05) {
                    float proc = (TonyTimeProc2 + .5) / 5;
                    vec2 center = ScreenCenter; // 0.5 * (ScreenSize0.xy);
                    //vec2 movdsss = center + (TexCoord0 - center ) * .8 * proc;
                    vec2 movdsss = center - ( center - TexCoord0 ) * (.8 + .2*proc);
                    movdsss += errmove(movdsss, TonyTimeOut, center);
                    
                    vec4 Color = Color0 * texture2D(Texture0, TexCoord0);

                    //vec4 altColor = texture2D(Texture0, movdsss);
                    vec4 altColor;
                    altColor.r  = texture2D(Texture0, movdsss + (vec2(redOffset * ActiveInOut * TonyTimeProc ))).r;
                    altColor.g  = texture2D(Texture0, movdsss + (vec2(greenOffset* ActiveInOut * TonyTimeProc))).g;
                    altColor.ba = texture2D(Texture0, movdsss + (vec2(blueOffset * ActiveInOut * TonyTimeProc))).ba;
                    altColor.xyz *= disst(movdsss, center) * ScreenSize0.x * 2 * ActiveInOut * TonyTimeProc;
                    altColor.xyz *= neonmix(disst(movdsss, center), TonyTimeProc);
                    Color = Color  +  altColor;

                    //gl_FragColor = Color;
                    float proc2 = (TonyTimeProc + .5) / 3;
                    gl_FragColor.r  = texture2D(Texture0, TexCoord0 + (vec2(redOffset * ActiveInOut * proc2 ))).r;
                    gl_FragColor.g  = texture2D(Texture0, TexCoord0 + (vec2(greenOffset* ActiveInOut * proc2))).g;
                    gl_FragColor.ba = texture2D(Texture0, TexCoord0 + (vec2(blueOffset * ActiveInOut * proc2))).ba;
                    gl_FragColor += altColor;
                }
                else {
                    vec4 Color = Color0 * texture2D(Texture0, TexCoord0);
                    gl_FragColor = Color;
                }
            }
        ]]></fragment>
    </shader>

</shaders>
